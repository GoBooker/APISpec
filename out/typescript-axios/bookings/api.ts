// tslint:disable
/**
 * Bookings
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Booking
 */
export interface Booking {
    /**
     * 
     * @type {string}
     * @memberof Booking
     */
    pickupTime: string;
    /**
     * 
     * @type {string}
     * @memberof Booking
     */
    pickupDate: string;
    /**
     * 
     * @type {string}
     * @memberof Booking
     */
    pickupAddress: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Booking
     */
    viaAddresses?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Booking
     */
    dropoffAddresses: string;
    /**
     * 
     * @type {string}
     * @memberof Booking
     */
    vehicleType?: BookingVehicleTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Booking
     */
    contactName: string;
    /**
     * 
     * @type {string}
     * @memberof Booking
     */
    contactNumber: string;
    /**
     * 
     * @type {string}
     * @memberof Booking
     */
    notes?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum BookingVehicleTypeEnum {
    _4seater = '4seater',
    _6seater = '6seater',
    _8seater = '8seater',
    _4estate = '4estate'
}

/**
 * 
 * @export
 * @interface InlineResponse201
 */
export interface InlineResponse201 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse201
     */
    id?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete a booking by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBookingsId: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteBookingsId.');
            }
            const localVarPath = `/bookings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets all bookings for this user
         * @summary Get all bookings
         * @param {number} [limit] Limit the query result set
         * @param {number} [offset] The offset used for pagination
         * @param {string} [after] After is a date in which we want records after
         * @param {string} [before] Before is the date which we want dates before
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBookings: async (limit?: number, offset?: number, after?: string, before?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/bookings`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = (after as any instanceof Date) ?
                    (after as any).toISOString() :
                    after;
            }

            if (before !== undefined) {
                localVarQueryParameter['before'] = (before as any instanceof Date) ?
                    (before as any).toISOString() :
                    before;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a booking by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBookingsId: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getBookingsId.');
            }
            const localVarPath = `/bookings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new booking for this user
         * @summary Create a new booking
         * @param {Booking} [booking] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putBookings: async (booking?: Booking, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/bookings`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof booking !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(booking !== undefined ? booking : {}) : (booking || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete a booking by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBookingsId(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteBookingsId(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets all bookings for this user
         * @summary Get all bookings
         * @param {number} [limit] Limit the query result set
         * @param {number} [offset] The offset used for pagination
         * @param {string} [after] After is a date in which we want records after
         * @param {string} [before] Before is the date which we want dates before
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBookings(limit?: number, offset?: number, after?: string, before?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Booking>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getBookings(limit, offset, after, before, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get a booking by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBookingsId(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getBookingsId(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a new booking for this user
         * @summary Create a new booking
         * @param {Booking} [booking] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putBookings(booking?: Booking, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse201>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putBookings(booking, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Delete a booking by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBookingsId(id: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteBookingsId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets all bookings for this user
         * @summary Get all bookings
         * @param {number} [limit] Limit the query result set
         * @param {number} [offset] The offset used for pagination
         * @param {string} [after] After is a date in which we want records after
         * @param {string} [before] Before is the date which we want dates before
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBookings(limit?: number, offset?: number, after?: string, before?: string, options?: any): AxiosPromise<Array<Booking>> {
            return DefaultApiFp(configuration).getBookings(limit, offset, after, before, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a booking by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBookingsId(id: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).getBookingsId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new booking for this user
         * @summary Create a new booking
         * @param {Booking} [booking] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putBookings(booking?: Booking, options?: any): AxiosPromise<InlineResponse201> {
            return DefaultApiFp(configuration).putBookings(booking, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Delete a booking by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteBookingsId(id: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteBookingsId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets all bookings for this user
     * @summary Get all bookings
     * @param {number} [limit] Limit the query result set
     * @param {number} [offset] The offset used for pagination
     * @param {string} [after] After is a date in which we want records after
     * @param {string} [before] Before is the date which we want dates before
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getBookings(limit?: number, offset?: number, after?: string, before?: string, options?: any) {
        return DefaultApiFp(this.configuration).getBookings(limit, offset, after, before, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a booking by ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getBookingsId(id: string, options?: any) {
        return DefaultApiFp(this.configuration).getBookingsId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new booking for this user
     * @summary Create a new booking
     * @param {Booking} [booking] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putBookings(booking?: Booking, options?: any) {
        return DefaultApiFp(this.configuration).putBookings(booking, options).then((request) => request(this.axios, this.basePath));
    }

}


